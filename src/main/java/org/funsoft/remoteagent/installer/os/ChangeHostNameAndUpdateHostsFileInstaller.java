/**
 * 
 */
package org.funsoft.remoteagent.installer.os;

import org.apache.commons.lang.StringUtils;
import org.funsoft.remoteagent.host.controller.HostFileManagementController;
import org.funsoft.remoteagent.host.dto.HostFileDto;
import org.funsoft.remoteagent.host.dto.HostFileEntryDto;
import org.funsoft.remoteagent.host.view.HostInternalDnsSelectionPanel;
import org.funsoft.remoteagent.installer.cnffile.RemoteConfigFileEditor;
import org.funsoft.remoteagent.installer.core.ExitInstallerRuntimeException;
import org.funsoft.remoteagent.installer.core.NormalExitInstallerRuntimeException;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * @author htb
 *
 */
public class ChangeHostNameAndUpdateHostsFileInstaller extends AbstractOsInstaller {
	private static final String START_BLOCK = "# ######## BEGIN TOPWAT HOSTS - AUTOGENERATED - DO NOT MODIFY MANUALLY";
	private static final String STOP_BLOCK = "# ######## END TOPWAT HOSTS";
	private static ChangeHostNameAndUpdateHostsFileInstaller instance;
	
	private HostFileDto selectedHostFile;
	
	public static ChangeHostNameAndUpdateHostsFileInstaller getInstance() {
		if (instance == null) {
			instance = new ChangeHostNameAndUpdateHostsFileInstaller();
		}
		return instance;
	}
	
	protected ChangeHostNameAndUpdateHostsFileInstaller(String name) {
		super(name);
	}
	protected ChangeHostNameAndUpdateHostsFileInstaller() {
		this("OS - change server host name + update hosts file");
	}

	@Override
	public String getDescription() {
		return "update host file (/etc/hosts) and change host name in one go";
	}

	@Override
	protected void beforeRepeatedlyPerform() {
		HostFileManagementController ctrl = new HostFileManagementController();
		selectedHostFile = ctrl.selectAHost();
		if (selectedHostFile == null) {
			throw new NormalExitInstallerRuntimeException();
		}
		// check again to make sure no DNS is defined twice
		Set<String> dns = new HashSet<>();
		for (HostFileEntryDto d : selectedHostFile.getIpToNames()) {
			if (dns.contains(d.getDns())) {
				throw new ExitInstallerRuntimeException("\"" + d.getDns() + "\" is defined twice");
			}
			dns.add(d.getDns());
		}
	}

	@Override
	protected void performInternal() throws Exception {
		changeHostName();
		updateHostsFile();
	}

	protected void changeHostName() throws Exception {
		String hostName = HostInternalDnsSelectionPanel.selectSignleExistIfCancel(
				"CHỌN 1 INTERNAL DNS ĐỂ LÀM HOSTNAME", hostInfo);
		sshSudoStrict("hostname " + hostName);
		executeAsBatchSudo("echo \"" + hostName + "\" > /etc/hostname");
	}
	
	protected void updateHostsFile() throws Exception {
		RemoteConfigFileEditor fileEditor = new RemoteConfigFileEditor(this);
		String fileContent = fileEditor.readRemoteTextFileAsString("/etc/hosts", true);
		
		String newContent = parseHostFile(fileContent, selectedHostFile.formatHostFile());
		fileEditor.show(newContent, "/etc/hosts");
	}
	
	private String parseHostFile(String fileContent, String newHostsMapping) {
		String[] lines = StringUtils.split(fileContent, "\n");
		List<String> result = new ArrayList<>();
		
		// determine start/stop block
		int startIndex = -1;
		int stopIndex = -1;
		for (int i = 0; i < lines.length; i++) {
			if ((startIndex > 0) && (stopIndex > 0)) {
				break;
			}
			String line = lines[i];
			if ((startIndex < 0) && StringUtils.startsWithIgnoreCase(line, START_BLOCK)) {
				startIndex = i;
			} else if (StringUtils.startsWithIgnoreCase(line, STOP_BLOCK)) {
				stopIndex = i;
			}
		}
		
		if (startIndex < 0) {
			result.add(START_BLOCK);
			result.add(newHostsMapping);
			result.add(STOP_BLOCK);
			result.add("");
		} else {
			for (int i = 0; i < startIndex; i++) {
				result.add(lines[i]);
			}
			result.add(START_BLOCK);
			result.add(newHostsMapping);
			result.add(STOP_BLOCK);
			result.add("");
		}
		
		if (stopIndex > 0) {
			for (int i = stopIndex + 1; i < lines.length; i++) {
				result.add(lines[i]);
			}
		} else if (startIndex < 0) {
			for (int i = 0; i < lines.length; i++) {
				result.add(lines[i]);
			}
		}
		
		return StringUtils.join(result, "\n");
	}
}
